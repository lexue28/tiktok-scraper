import os
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

sns.set_theme(style="whitegrid", context="talk")

day_folders = ["Thur", "Fri", "Sat", "Sun"]
search_folders = ["search"]

def get_account_proportions(folders, dataset_label):
    proportions = []
    for day in folders:
        folder_path = os.path.join("classify", day)
        if not os.path.exists(folder_path):
            continue
        for file in os.listdir(folder_path):
            if file.endswith(".csv") and "classified_results" in file:
                file_path = os.path.join(folder_path, file)
                df = pd.read_csv(file_path)
                df.columns = df.columns.str.strip().str.lower()

                if "harmful" not in df.columns:
                    continue

                if "account" not in df.columns:
                    if file.endswith("_a.csv"):
                        df["account"] = "logs_a1"
                    elif file.endswith("_c.csv"):
                        df["account"] = "logs_c1"

                for account, group_df in df.groupby("account"):
                    print("account", account)
                    group = "Adults" if "_a" in account else "Children" if "_c" in account else None
                    if group is None:
                        continue

                    harmful_count = (group_df["harmful"] == "harmful").sum()
                    total_count = len(group_df)
                    proportion = harmful_count / total_count if total_count > 0 else 0

                    proportions.append({
                        "Group": group,
                        "ProportionHarmful": proportion,
                        "Dataset": dataset_label,
                        "Account": account
                    })
    return proportions

day_data = get_account_proportions(day_folders, "FYF")
search_data = get_account_proportions(search_folders, "Search")

plot_df = pd.DataFrame(day_data + search_data)

# green and yellow
print(sns.color_palette("colorblind").as_hex())
palette = {"FYF": "#029e73", "Search": "#ece133"}  

plt.figure(figsize=(8, 6))
sns.boxplot(data=plot_df, x="Group", y="ProportionHarmful", hue="Dataset",
            palette=palette, showcaps=True, boxprops={'facecolor': 'None'},
            showfliers=True, whiskerprops={'linewidth': 1})

sns.swarmplot(data=plot_df, x="Group", y="ProportionHarmful", hue="Dataset",
              dodge=True, size=5, linewidth=0.5, edgecolor="black", palette=palette)

handles, labels = plt.gca().get_legend_handles_labels()
unique = dict(zip(labels, handles))
plt.legend(unique.values(), unique.keys(), title="Source")

plt.title("Proportion of Harmful Descriptions per Account")
plt.ylabel("Proportion of Harmful Descriptions")
plt.ylim(0, plot_df["ProportionHarmful"].max() * 1.1)
plt.tight_layout()
out_path = os.path.join("classify", "desc_box.png")
plt.savefig(out_path, dpi=200, bbox_inches="tight")
print(f"saved to: {out_path}")
